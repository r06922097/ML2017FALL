import numpy as np
import pandas as pd
import csv
import sys
import keras
from keras.models import Sequential
from keras.layers import Dense, Activation, Dropout, Flatten
from keras.layers import normalization, Conv2D, MaxPooling2D
from keras.models import load_model
from keras.preprocessing.image import ImageDataGenerator

training_data = sys.argv[1]

batch_size = 512
num_classes = 7
epochs = 100

df_load = pd.read_csv(training_data,encoding='big5')
y = np.array(df_load['label'])
y_train = np.zeros((len(y),num_classes))
for i in range(len(y)):
    if y[i] == 0:
        y_train[i][0] = 1
    elif y[i] == 1:
        y_train[i][1] = 1
    elif y[i] == 2:
        y_train[i][2] = 1
    elif y[i] == 3:
        y_train[i][3] = 1
    elif y[i] == 4:
        y_train[i][4] = 1
    elif y[i] == 5:
        y_train[i][5] = 1
    elif y[i] == 6:
        y_train[i][6] = 1

y_test = y_train[:len(y_train)//10] #first 1/10 is testing set
y_train = y_train[len(y_train)//10:] #last 9/10 is training set

x_train = []
for i in range(len(df_load)):
    tmp_list = df_load['feature'][i].split(' ')
    tmp_list2 = np.array([[int(i)] for i in tmp_list]) # convert every element i into [i]
    tmp_matrix = np.reshape(tmp_list2,(48,48,1))  #convert into 48*48 dimension
    x_train.append(tmp_matrix)
x_train = np.array(x_train)

x_test = x_train[:len(x_train)//10] #first 1/10 is testing set
x_train = x_train[len(x_train)//10:] #last 9/10 is training set

x_train = x_train.astype('float32')
x_test = x_test.astype('float32')

model = load_model('R_cifar10_model55_2.h5')

print('Using real-time data augmentation.')
# This will do preprocessing and realtime data augmentation:
datagen = ImageDataGenerator(
    featurewise_center=False,  # set input mean to 0 over the dataset
    samplewise_center=False,  # set each sample mean to 0
    featurewise_std_normalization=False,  # divide inputs by std of the dataset
    samplewise_std_normalization=False,  # divide each input by its std
    zca_whitening=False,  # apply ZCA whitening
    rotation_range=20,  # randomly rotate images in the range (degrees, 0 to 180)
    width_shift_range=0.1,  # randomly shift images horizontally (fraction of total width)
    height_shift_range=0.1,  # randomly shift images vertically (fraction of total height)
    horizontal_flip=True,  # randomly flip images
    vertical_flip=False)  # randomly flip images

    # Compute quantities required for feature-wise normalization
    # (std, mean, and principal components if ZCA whitening is applied).
datagen.fit(x_train)

    # Fit the model on the batches generated by datagen.flow().
model.fit_generator(datagen.flow(x_train, y_train,
                    batch_size=batch_size),
                    steps_per_epoch=int(np.ceil(x_train.shape[0] / float(batch_size))),
                    epochs=epochs,
                    validation_data=(x_test, y_test),
                    workers=4)

model.save('train3.h5')
